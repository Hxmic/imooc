#include <iostream>#include "string.h"#include "MyStack.h"#include "Coordinate.h"using namespace std;#define BINARY 2#define OCTONARY 8#define HEXADECIMAL 16int main(){/*	//template Coordinate	MyStack<Coordinate> *pStack = new MyStack<Coordinate>(5);		//入栈	pStack->push(Coordinate(1,2));	pStack->push(Coordinate(3,4));	//遍历	pStack->stackTraverse(true);	cout << pStack->stackLength() << endl;	//出栈	Coordinate coo;	pStack->pop(coo);	cout << coo;	pStack->pop(coo);	cout << coo;	delete pStack;	pStack = NULL;*/		/*	//template char	MyStack<char> *pStack = new MyStack<char>(5);	//入栈	pStack->push('h');	pStack->push('l');	//遍历	pStack->stackTraverse(true);	cout << pStack->stackLength() << endl;	//出栈	char coo;	pStack->pop(coo);	cout << coo;	pStack->pop(coo);	cout << coo;	delete pStack;	pStack = NULL;*//*	//进制转换	MyStack<int> *pStack = new MyStack<int>(30);	int N = 13480;	int mod = 0;	char num[] = "0123456789ABCDEF";		while(N != 0)	{		mod = N % HEXADECIMAL;		pStack->push(mod);		N = N / HEXADECIMAL;	}		int elem = 0;	while(!pStack->stackEmpty())	{		pStack->pop(elem);		cout <<num[elem];	}	delete pStack;	pStack = NULL;*/	//检测括号是否匹配    [()[(()])] 	MyStack<char> *pStack = new MyStack<char>(30);	MyStack<char> *pNeedStack = new MyStack<char>(30);		char str[] = "[()([()])]";	char curNeed = 0;		for(int i = 0; i < strlen(str); i++)	{		if(str[i] != curNeed)		{			pStack->push(str[i]);			switch(str[i])			{				case '[':					if(curNeed != 0)					{						pNeedStack->push(curNeed);					}					curNeed = ']';					break;				case '(':					if(curNeed != 0)					{						pNeedStack->push(curNeed);					}					curNeed = ')';					break;				default:					cout << " 括号匹配失败！" << endl;					return 0;			}		}		else		{			char elem;			pStack->pop(elem);			pNeedStack->pop(curNeed);		}	}		if(pStack->stackEmpty())	{		cout << "括号匹配成功！" << endl;	}	else	{		cout << "括号匹配不成功！" << endl;	}		delete pStack;	pStack = NULL;		return 0;}