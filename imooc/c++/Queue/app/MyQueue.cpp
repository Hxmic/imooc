#include "MyQueue.h"#include <iostream>using namespace std;//构造函数MyQueue::MyQueue(int queueCapacity){	m_pQueue = new Customer[queueCapacity];	m_iQueueCapacity = queueCapacity;	ClearQueue(); 	}//析构函数MyQueue::~MyQueue(){	delete []m_pQueue;	m_pQueue = NULL;}//清空队列void MyQueue::ClearQueue(){	m_iQueueLen = 0;	m_iHead = 0;	m_iTail = 0;	cout << "ClearQueue" << endl;}//判断队列是否为空bool MyQueue::QueueEmpty() const{	return m_iQueueLen == 0 ? true:false;}//判断队列是否为满bool MyQueue::QueueFull() const{	return m_iQueueLen == m_iQueueCapacity ? true:false;}//判断队列长度int MyQueue::QueueLength() const{	return m_iQueueLen;}//入队bool MyQueue::EnQueue(Customer element){	if(QueueFull())	{		return false;	}	m_pQueue[m_iTail] = element;	m_iTail++;	m_iTail = m_iTail % m_iQueueCapacity;	m_iQueueLen++;	cout << "入队:";	element.printInfo();	return true;} //出队bool MyQueue::DeQueue(Customer &element){	if(QueueEmpty())	{		return false;	}	element = m_pQueue[m_iHead];	m_iHead++;	m_iHead = m_iHead % m_iQueueCapacity;	m_iQueueLen--;	cout << "出队:" ;	element.printInfo();		return true;}//遍历环形队列void MyQueue::QueueTraverse(){	cout << "遍历环形队列:" << endl;	for(int ii = m_iHead; ii < m_iQueueLen + m_iHead; ii++)	{		m_pQueue[ii%m_iQueueCapacity].printInfo();	}}