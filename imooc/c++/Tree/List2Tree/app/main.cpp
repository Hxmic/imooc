#include <iostream>#include "listTree.h"using namespace std;/*						(0)							5(1)			8(2)						2(3)	6(4)	0(5)	7(6)*/int main(){	Node *node1 = new Node();	node1->nodeIndex = 1;	node1->data = 5;		Node *node2 = new Node();	node2->nodeIndex = 2;	node2->data = 8;		Node *node3 = new Node();	node3->nodeIndex = 3;	node3->data = 1;		Node *node4 = new Node();	node4->nodeIndex = 4;	node4->data = 6;		Node *node5 = new Node();	node5->nodeIndex = 5;	node5->data = 0;		Node *node6 = new Node();	node6->nodeIndex = 6;	node6->data = 7;		Node *node7 = new Node();	node7->nodeIndex = 7;	node7->data = 5;		Node *node8 = new Node();	node8->nodeIndex = 8;	node8->data = 8;		Node *node9 = new Node();	node9->nodeIndex = 9;	node9->data = 1;		Node *node10 = new Node();	node10->nodeIndex = 10;	node10->data = 6;		Node *node11 = new Node();	node11->nodeIndex = 11;	node11->data = 2;		Node *node12 = new Node();	node12->nodeIndex = 12;	node12->data = 7;		ListTree *tree = new ListTree();		tree->AddNode(0, 0, node1);	tree->AddNode(0, 1, node2);	tree->AddNode(1, 0, node3);	tree->AddNode(1, 1, node4);	tree->AddNode(2, 0, node5);	tree->AddNode(2, 1, node6);	tree->AddNode(3, 0, node7);	tree->AddNode(3, 1, node8);	tree->AddNode(4, 0, node9);	tree->AddNode(4, 1, node10);	tree->AddNode(5, 0, node11);	tree->AddNode(5, 1, node12);		tree->DeleteNode(5, NULL);	tree->PreorderTraversal();//	tree->InorderTraversal();//	tree->PostorderTraversal();		delete tree;	tree = NULL;	return 0;}