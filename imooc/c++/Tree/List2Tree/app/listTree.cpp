#include "listTree.h"#include <iostream>using namespace std;ListTree::ListTree(){	m_pRoot = new Node();}ListTree::~ListTree(){	DeleteNode(0, NULL);}Node *ListTree::SearchNode(int nodeIndex){	return m_pRoot->SearchNode(nodeIndex);}bool ListTree::AddNode(int nodeIndex, int dir, Node *pNode){	Node *temp = SearchNode(nodeIndex);	if(temp == NULL)	{		return false;	}		Node *node = new Node();	if(NULL == node)	{		return false;	}	node->nodeIndex = pNode->nodeIndex;	node->data = pNode->data;	node->m_pParentNode = temp;		if(0 == dir)	{		if(NULL == temp->m_pLeftNode)		{			temp->m_pLeftNode = node;		}		return true;	}		if(1 == dir)	{		if(NULL == temp->m_pRightNode)		{			temp->m_pRightNode = node;		}		return true;	}	return false;}bool ListTree::DeleteNode(int nodeIndex, Node *pNode){	Node *temp = SearchNode(nodeIndex);	if(temp == NULL)	{		return false;	}	if(pNode != NULL)	{		pNode->data = temp->data;	}	temp->DeleteNode();	return true;}void ListTree::PreorderTraversal(){	m_pRoot->PreorderTraversal();}void ListTree::InorderTraversal(){	m_pRoot->InorderTraversal();}void ListTree::PostorderTraversal(){	m_pRoot->PostorderTraversal();}